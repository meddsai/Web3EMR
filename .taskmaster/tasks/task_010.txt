# Task ID: 10
# Title: Implement System Testing and Documentation
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7, 8, 9
# Priority: medium
# Description: Develop comprehensive testing suites, documentation, and deployment guides for the Web3EMR system.
# Details:
1. Create end-to-end test suites for the entire system
2. Develop load testing scenarios to verify system performance
3. Implement security testing including penetration testing
4. Create comprehensive API documentation
5. Develop user guides for patients and healthcare providers
6. Create deployment guides for different environments
7. Implement continuous integration and deployment pipelines
8. Develop monitoring and alerting systems

Code structure:
```typescript
// tests/e2e/patient-flow.test.ts
import { ApiPromise, WsProvider, Keyring } from '@polkadot/api';
import { cryptoWaitReady } from '@polkadot/util-crypto';
import { BN } from '@polkadot/util';
import { CessClient } from '@cess/client';

describe('Patient EMR Management Flow', () => {
  let api: ApiPromise;
  let patientAccount: any;
  let providerAccount: any;
  let cessClient: CessClient;
  
  beforeAll(async () => {
    // Initialize API
    const wsProvider = new WsProvider('ws://localhost:9944');
    api = await ApiPromise.create({ provider: wsProvider });
    
    // Wait for crypto to be ready
    await cryptoWaitReady();
    
    // Create test accounts
    const keyring = new Keyring({ type: 'sr25519' });
    patientAccount = keyring.addFromUri('//Alice');
    providerAccount = keyring.addFromUri('//Bob');
    
    // Initialize CESS client
    cessClient = new CessClient('http://localhost:8080', {
      account: patientAccount,
    });
  });
  
  afterAll(async () => {
    await api.disconnect();
  });
  
  test('Patient can create an identity', async () => {
    // Create identity for patient
    const identityInfo = {
      display: 'Alice Patient',
      email: 'alice@example.com',
      legal: 'Alice Smith',
      web: 'https://alice.example.com',
      riot: '@alice:matrix.org',
      twitter: '@alicesmith',
    };
    
    const tx = api.tx.identity.setIdentity(identityInfo);
    const result = await tx.signAndSend(patientAccount);
    
    // Wait for transaction to be finalized
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // Verify identity was created
    const identityOpt = await api.query.identity.identityOf(patientAccount.address);
    expect(identityOpt.isSome).toBe(true);
    
    const identity = identityOpt.unwrap();
    expect(identity.info.display.asRaw.toUtf8()).toBe('Alice Patient');
  });
  
  test('Patient can upload an EMR', async () => {
    // Create sample EMR data
    const emrData = new Uint8Array(Buffer.from(JSON.stringify({
      patientName: 'Alice Smith',
      dateOfBirth: '1980-01-01',
      bloodType: 'A+',
      allergies: ['Penicillin'],
      conditions: ['Hypertension'],
      medications: ['Lisinopril'],
    })));
    
    // Encrypt and upload to CESS
    const encryptionKey = new Uint8Array(32); // In a real scenario, this would be securely generated
    const cid = await cessClient.store(emrData, {
      encryption: {
        algorithm: 'AES-256',
        key: encryptionKey,
      },
      replication: 3,
    });
    
    expect(cid).toBeDefined();
    expect(typeof cid).toBe('string');
    
    // Store CID on blockchain
    const tx = api.tx.emrPallet.storeEmr(cid);
    await tx.signAndSend(patientAccount);
    
    // Wait for transaction to be finalized
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // Verify EMR was stored
    const emrCids = await api.query.emrPallet.emrCids(patientAccount.address);
    expect(emrCids.length).toBeGreaterThan(0);
    expect(emrCids[emrCids.length - 1].toString()).toBe(cid);
  });
  
  test('Patient can grant access to a provider', async () => {
    // Get the latest EMR CID
    const emrCids = await api.query.emrPallet.emrCids(patientAccount.address);
    const latestCid = emrCids[emrCids.length - 1];
    
    // Grant read access to provider
    const tx = api.tx.emrPallet.grantAccess(
      providerAccount.address,
      latestCid,
      { Read: null },
      null // No expiration
    );
    await tx.signAndSend(patientAccount);
    
    // Wait for transaction to be finalized
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // Verify access was granted
    const accessList = await api.query.emrPallet.accessLists(
      patientAccount.address,
      latestCid
    );
    
    const hasAccess = accessList.some((entry: any) => 
      entry[0].toString() === providerAccount.address.toString() && 
      entry[1].isRead
    );
    
    expect(hasAccess).toBe(true);
  });
  
  test('Provider can access patient EMR', async () => {
    // Get the latest EMR CID
    const emrCids = await api.query.emrPallet.emrCids(patientAccount.address);
    const latestCid = emrCids[emrCids.length - 1];
    
    // Verify provider has access
    const hasAccess = await api.query.emrPallet.verifyAccess(
      providerAccount.address,
      patientAccount.address,
      latestCid
    );
    
    expect(hasAccess.isTrue).toBe(true);
    
    // Retrieve EMR (in a real scenario, this would include decryption)
    const encryptedData = await cessClient.retrieve(latestCid.toString());
    expect(encryptedData).toBeDefined();
    
    // Check access history
    const accessHistory = await api.query.emrPallet.accessHistory(
      patientAccount.address,
      latestCid
    );
    
    const hasAccessRecord = accessHistory.some((entry: any) => 
      entry[0].toString() === providerAccount.address.toString() && 
      entry[2].isAccessed
    );
    
    expect(hasAccessRecord).toBe(true);
  });
  
  test('Patient can revoke access', async () => {
    // Get the latest EMR CID
    const emrCids = await api.query.emrPallet.emrCids(patientAccount.address);
    const latestCid = emrCids[emrCids.length - 1];
    
    // Revoke access
    const tx = api.tx.emrPallet.revokeAccess(
      providerAccount.address,
      latestCid
    );
    await tx.signAndSend(patientAccount);
    
    // Wait for transaction to be finalized
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // Verify access was revoked
    const hasAccess = await api.query.emrPallet.verifyAccess(
      providerAccount.address,
      patientAccount.address,
      latestCid
    );
    
    expect(hasAccess.isFalse).toBe(true);
  });
});

// CI/CD Pipeline (GitHub Actions example)
// .github/workflows/ci.yml
```yaml
name: Web3EMR CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v1
        
      - name: Install frontend dependencies
        run: cd frontend && npm ci
        
      - name: Lint frontend
        run: cd frontend && npm run lint
        
      - name: Test frontend
        run: cd frontend && npm test
        
      - name: Check Rust formatting
        run: cd substrate-node && cargo fmt -- --check
        
      - name: Clippy
        run: cd substrate-node && cargo clippy -- -D warnings
        
      - name: Build Substrate node
        run: cd substrate-node && cargo build --release
        
      - name: Run Substrate tests
        run: cd substrate-node && cargo test --all
        
      - name: Start local testnet
        run: cd substrate-node && ./target/release/web3emr-node --dev &
        
      - name: Run E2E tests
        run: cd tests && npm ci && npm run test:e2e
        
  deploy-testnet:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Deployment steps for testnet
      
  deploy-mainnet:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Deployment steps for mainnet
```

# Test Strategy:
1. Execute end-to-end test suites covering patient and provider flows
2. Conduct load testing with simulated users to verify system performance
3. Perform security testing including penetration testing
4. Verify API documentation accuracy and completeness
5. Test user guides with representative users
6. Verify deployment guides in different environments
7. Test CI/CD pipelines for reliability
8. Verify monitoring and alerting systems
9. Conduct integration testing across all system components
10. Perform regression testing after any system changes
